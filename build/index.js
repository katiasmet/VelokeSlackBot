'use strict';

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _remove2 = require('lodash/remove');

var _remove3 = _interopRequireDefault(_remove2);

var _toLower2 = require('lodash/toLower');

var _toLower3 = _interopRequireDefault(_toLower2);

var _uniq2 = require('lodash/uniq');

var _uniq3 = _interopRequireDefault(_uniq2);

var _botkit = require('botkit');

var _botkit2 = _interopRequireDefault(_botkit);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _cron = require('cron');

var _replies = require('./settings/replies');

var _drunk_replies = require('./settings/drunk_replies');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var controller = _botkit2.default.slackbot({
  debug: true
}); //D4NP461K6

var bot = controller.spawn({
  token: process.env.BOT_API_KEY
}).startRTM();

var stations = void 0,
    reply = void 0;
var drunkFriday = false;

controller.hears(['hello', 'hi', 'hallo', 'yo', 'ieps', 'hoi', 'hey', 'allo'], 'direct_message,direct_mention,mention', function (bot, message) {
  controller.storage.users.get(message.user, function (err, user) {
    if (user && user.name) {
      drunkFriday ? bot.reply(message, (0, _drunk_replies.DRUNK_REPLY_hello_user)(user.name)) : bot.reply(message, (0, _replies.REPLY_hello_user)(user.name));
    } else {
      drunkFriday ? bot.reply(message, _drunk_replies.DRUNK_REPLY_hello) : bot.reply(message, _replies.REPLY_hello);
    }
  });
});

controller.hears(['shutdown'], 'direct_message,direct_mention,mention', function (bot, message) {

  bot.startConversation(message, function (err, convo) {

    convo.ask('Ben je zeker dat je me wilt afsluiten?', [{
      pattern: bot.utterances.yes,
      callback: function callback(response, convo) {
        convo.say('Salukes!');
        convo.next();
        setTimeout(function () {
          process.exit();
        }, 3000);
      }
    }, {
      pattern: bot.utterances.no,
      default: true,
      callback: function callback(response, convo) {
        convo.say('*Fiew!*');
        convo.next();
      }
    }]);
  });
});

controller.hears(['velo'], 'direct_message,direct_mention,mention', function (bot, message) {
  getVelokes(message);
});

/* Handle Velokes Replies */
var getVelokes = function getVelokes(message) {
  var automatic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


  (0, _nodeFetch2.default)('https://www.velo-antwerpen.be/availability_map/getJsonObject').then(function (res) {
    return res.json();
  }).then(function (json) {
    stations = json;

    var checks = handleChecks(message.text);
    checks = (0, _remove3.default)(checks, function (check) {
      return check !== 'velo' || check !== 'veloke';
    });

    stations = handleSelectStations(checks);
    handleStations(message, automatic);
  });
};

var handleChecks = function handleChecks(input) {

  if (input.includes(process.env.BASE_CAMP)) return process.env.BASE_STATIONS.split(', '); //check if the basecamp is called
  else return input.split(' ');
};

var handleSelectStations = function handleSelectStations(checks) {

  var selectedStations = [];

  stations.forEach(function (station) {
    checks.forEach(function (check) {

      check = (0, _toLower3.default)(check);
      var address = (0, _toLower3.default)(station.address);
      var name = (0, _toLower3.default)(station.name);
      if (address.includes(check) || name.includes(check)) selectedStations.push(station);
    });
  });

  return (0, _uniq3.default)(selectedStations);
};

/* check if there are multiple stations, 1 station or no stations */
var handleStations = function handleStations(message, automatic) {

  if (!(0, _isEmpty3.default)(stations)) {
    if (stations.length > 1) handleReplies(stations, message, true, automatic);else handleReplies(stations[0], message, automatic);
  } else {
    drunkFriday ? bot.reply(message, _drunk_replies.DRUNK_REPLY_no_stations) : bot.reply(message, _replies.REPLY_no_stations);
  }
};

/* handle answers */
var handleReplies = function handleReplies(station, message) {
  var multipleStations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var automatic = arguments[3];

  //automatic happens when a cron job is set

  if (multipleStations) {

    var stationsReply = handleMultipleStationsReply();
    if (automatic) handleAutomaticReply(stationsReply);else bot.reply(message, stationsReply);
  } else if (station.bikes > 0) {

    if (station.bikes < 5) {

      if (automatic) {
        drunkFriday ? handleAutomaticReply((0, _drunk_replies.DRUNK_REPLY_almost_empty)(station.bikes, station.address)) : handleAutomaticReply((0, _replies.REPLY_almost_empty)(station.bikes, station.address));
      } else {
        drunkFriday ? bot.reply(message, (0, _drunk_replies.DRUNK_REPLY_almost_empty)(station.bikes, station.address)) : bot.reply(message, (0, _replies.REPLY_almost_empty)(station.bikes, station.address));
      };
    } else {

      if (automatic) {
        drunkFriday ? handleAutomaticReply((0, _drunk_replies.DRUNK_REPLY_full)(station.bikes, station.address)) : handleAutomaticReply((0, _replies.REPLY_full)(station.bikes, station.address));
      } else {
        drunkFriday ? bot.reply(message, (0, _drunk_replies.DRUNK_REPLY_full)(station.bikes, station.address)) : bot.reply(message, (0, _replies.REPLY_full)(station.bikes, station.address));
      };
    }
  } else {

    if (automatic) {
      drunkFriday ? handleAutomaticReply((0, _drunk_replies.DRUNK_REPLY_empty)(station.address)) : handleAutomaticReply((0, _replies.REPLY_empty)(station.address));
    } else {
      drunkFriday ? bot.reply(message, (0, _drunk_replies.DRUNK_REPLY_empty)(station.address)) : bot.reply(message, (0, _replies.REPLY_empty)(station.address));
    };
  }
};

var handleAutomaticReply = function handleAutomaticReply(reply) {
  bot.say({
    text: reply,
    channel: process.env.MAIN_CHANNEL
  });
};

var handleMultipleStationsReply = function handleMultipleStationsReply() {
  var _ref;

  var replies = [];
  stations.forEach(function (station) {
    drunkFriday ? replies.push((0, _drunk_replies.DRUNK_REPLY_more_stations)(station.bikes, station.address)) : replies.push((0, _replies.REPLY_more_stations)(station.bikes, station.address));
  });

  return (_ref = "").concat.apply(_ref, replies);
};

/* Cron Job */
var handleCronJobs = function handleCronJobs() {

  handleDailyUpdate();
  handleDrunkFriday();
};

var handleDailyUpdate = function handleDailyUpdate() {
  if (process.env.AUTO_TIMER) {

    var job = new _cron.CronJob({
      cronTime: process.env.AUTO_TIMER,
      onTick: function onTick() {
        getVelokes({ text: process.env.BASE_CAMP }, true);
      },
      start: false,
      timeZone: 'Europe/Amsterdam'
    });

    job.start();
  }
};

var handleDrunkFriday = function handleDrunkFriday() {
  var job = new _cron.CronJob({
    cronTime: '* * * * * 5',
    onTick: function onTick() {
      drunkFriday = true;
    },
    start: false,
    timeZone: 'Europe/Amsterdam'
  });

  job.start();
};

handleCronJobs();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,